scalar Email
type User {
  id: ID!
  email: Email!
}
input UserWhereInput {
  id: ID!
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}
# input UserWhereUniqueInput {
#   id: ID!
# }
type Query {
  user(id: ID!): User!
  users(
    where: UserWhereInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [User]!
}

type Mutation {
  createUser(email: String!, password: String!): User!
  updateUser(id: ID!, email: String, password: String): User!
  deleteUser(id: ID!): User!
}
